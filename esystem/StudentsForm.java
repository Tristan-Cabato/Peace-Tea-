/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;
import java.awt.*;
import java.sql.*;
import java.util.Calendar;

import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author tcabato
 */
public class StudentsForm extends javax.swing.JFrame {

    /**
     * Creates new form StudentsForm
     */
    public StudentsForm() {
        setTitle("Students Form");
        initComponents();
        // Clear any default rows from the table
        DefaultTableModel model1 = (DefaultTableModel)jTable1.getModel();
        model1.setRowCount(0);
        DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();
        model2.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        Studid = new javax.swing.JTextField();
        Name = new javax.swing.JTextField();
        Address = new javax.swing.JTextField();
        Contact = new javax.swing.JTextField();
        Gender = new javax.swing.JTextField();
        YearLevel = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Studid.setEditable(false);
        Studid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudidActionPerformed(evt);
            }
        });

        Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameActionPerformed(evt);
            }
        });

        YearLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearLevelActionPerformed(evt);
            }
        });

        jLabel1.setText("Student ID");

        jLabel2.setText("Student Year Level");

        jLabel3.setText("Student Address");

        jLabel4.setText("Student Name");

        jLabel5.setText("Student Gender");

        jLabel6.setText("Student Contact");

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Contact", "Gender", "Year Level"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel7.setBackground(new java.awt.Color(30, 0, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(30, 0, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Student Registration");
        jLabel7.setToolTipText("");
        jLabel7.setAlignmentX(10.0F);
        jLabel7.setAlignmentY(5.0F);

        jButton4.setText("Assign Subject");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete Subject");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Code", "Description", "Units", "Schedule"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Assigned Subjects");

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Subjects");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Teachers");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Databases");

        jMenuItem5.setText("1st Semester");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("2nd Semester");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("Summer");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(458, 458, 458))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Studid, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Gender)
                            .addComponent(Contact)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2)
                                .addComponent(delete))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(YearLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton5))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save)
                        .addGap(12, 12, 12)
                        .addComponent(jButton4)
                        .addGap(11, 11, 11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel8))
                .addGap(21, 21, 21))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Studid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel5))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(YearLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(save)
                                .addComponent(jButton4))
                            .addComponent(jLabel8))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addGap(0, 135, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void YearLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_YearLevelActionPerformed

    private void NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Students student = new Students();
            student.SaveRecord(student.Studid, Name.getText(), Address.getText(), 
                Integer.parseInt(Contact.getText()), Gender.getText(), 
                Integer.parseInt(YearLevel.getText()));
            
            String username = String.valueOf(student.Studid) + Name.getText();
            String password = "AdDU" + Name.getText();
            
            try {
                // Escape the username and database name to handle special characters
                String escapedUsername = username.replace("'", "''");
                String escapedDB = ESystem.currentDB.replace("'", "''");
                
                // Create user with proper escaping
                String createUserSQL = String.format(
                    "CREATE USER '%s'@'%%' IDENTIFIED BY '%s';", 
                    escapedUsername, password.replace("'", "''"));
                ESystem.st.executeUpdate(createUserSQL);
                
                // Grant all privileges on the current database
                String grantSQL = String.format(
                    "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `%s`.* TO '%s'@'%%';", 
                    escapedDB, escapedUsername);
                ESystem.st.executeUpdate(grantSQL);
                
                // Revoke global privileges
                String revokeGlobal = String.format(
                    "REVOKE ALL PRIVILEGES ON *.* FROM '%s'@'%%';", 
                    escapedUsername);
                ESystem.st.executeUpdate(revokeGlobal);
                
                // Revoke grant option if any
                String revokeGrantOption = String.format(
                    "REVOKE GRANT OPTION ON `%s`.* FROM '%s'@'%%';", 
                    escapedDB, escapedUsername);
                ESystem.st.executeUpdate(revokeGrantOption);
                
                ESystem.st.executeUpdate("FLUSH PRIVILEGES;");
                System.out.println("Student user created with full access to database " + escapedDB);
                
            } catch (SQLException ex) {
                System.err.println("Error creating database user: " + ex.getMessage());
                throw ex; // Re-throw to be caught by the outer try-catch
            }
            showRecords();
        } catch (Exception ex) {
            System.err.println("Error: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, 
                "Error: " + ex.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }                                    

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Students student = new Students();
        student.UpdateRecord(Integer.parseInt(Studid.getText()), Name.getText(), Address.getText(), Integer.parseInt(Contact.getText()), Gender.getText(), Integer.parseInt(YearLevel.getText()));
        showRecords();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
        if (Studid.getText().trim().isEmpty()) {
            System.err.println("Error: Student ID is empty");
            return;
        }
        
        try {
            int studentId = Integer.parseInt(Studid.getText());
            String getUsernameSQL = String.format(
                "SELECT CONCAT(Studid, Name) AS username FROM students WHERE Studid = %d", 
                studentId);
            String username = null;
            try (ResultSet rs = ESystem.st.executeQuery(getUsernameSQL)) {
                if (rs.next()) username = rs.getString("username");
            } catch (Exception e) {}
            
            Students student = new Students();
            student.DeleteRecord(studentId);
            
            if (username != null) {
                try {
                    String dropUserSQL = String.format("DROP USER '%s'@'%s';", username, ESystem.usedHostAddress);
                    ESystem.st.executeUpdate(dropUserSQL);
                    ESystem.st.executeUpdate("FLUSH PRIVILEGES;");
                } catch (SQLException ex) { 
                    System.err.println("Error deleting database user: " + ex.getMessage()); 
                }
            }
            showRecords();
        } catch (NumberFormatException ex) {
            System.err.println("Error: Invalid student ID format");
        } catch (Exception ex) { 
            System.err.println("Error: " + ex.getMessage()); 
        }
        showRecords();
    }                                        

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SubjectForm sform = new SubjectForm();
        sform.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        TeacherForm tform = new TeacherForm();
        tform.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void StudidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StudidActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Load student records when the form opens
        showRecords();
    }//GEN-LAST:event_formWindowOpened

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            int row = jTable1.getSelectedRow();
            if (row < 0) return;
            
            // Get the selected student's ID
            int studentId = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
            
            // Update the form fields with the selected student's data
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            Studid.setText(model.getValueAt(row, 0).toString());
            Name.setText(model.getValueAt(row, 1).toString());
            Address.setText(model.getValueAt(row, 2).toString());
            Contact.setText(model.getValueAt(row, 3).toString());
            Gender.setText(model.getValueAt(row, 4).toString());
            YearLevel.setText(model.getValueAt(row, 5).toString());
            
            // Show the enrolled subjects for the selected student
            showEnrollRecords();
        } catch (Exception e) { 
            System.out.println("Error selecting student: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        jButton5.setEnabled(jTable2.getSelectedRow() >= 0);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (Studid.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a student first");
            return;
        }
        
        SubjectForm sForm = null;
        for (Window window : Window.getWindows()) {
            if (window.isVisible() && window instanceof SubjectForm) {
                sForm = (SubjectForm) window;
                break;
            }
        }
        
        if (sForm == null) {
            JOptionPane.showMessageDialog(this, "Please open a Subjects window first");
            return;
        }
        
        int selectedRow = sForm.getJTable1().getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a subject in the Subjects window");
            return;
        }
        
        try { 
            int subjectId = Integer.parseInt(sForm.getJTable1().getValueAt(selectedRow, 0).toString());
            int studentId = Integer.parseInt(Studid.getText());
            
            // Check if already enrolled
            String checkQuery = "SELECT COUNT(*) FROM Enroll WHERE studid = " + studentId + " AND subjid = " + subjectId;
            ESystem.rs = ESystem.st.executeQuery(checkQuery);
            if (ESystem.rs.next() && ESystem.rs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "This student is already enrolled in the selected subject");
                return;
            }
            
            Enrolled enroll = new Enrolled();
            enroll.setsubjid(subjectId);
            String result = enroll.enrollStudent(studentId);
            
            JOptionPane.showMessageDialog(this, result);
            showEnrollRecords();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (Studid.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a student first");
            return;
        }
        
        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a subject to drop");
            return;
        }
        
        try {
            int subjectId = Integer.parseInt(jTable2.getValueAt(selectedRow, 0).toString());
            int studentId = Integer.parseInt(Studid.getText());
            
            int confirm = JOptionPane.showConfirmDialog(
                this, 
                "Are you sure you want to drop this subject?",
                "Confirm Drop",
                JOptionPane.YES_NO_OPTION
            );
            
            if (confirm == JOptionPane.YES_OPTION) {
                Enrolled enroll = new Enrolled();
                enroll.setsubjid(subjectId);
                String result = enroll.dropSubject(studentId);
                JOptionPane.showMessageDialog(this, result);
                showEnrollRecords();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        // Add 1stSem to database
        int year = Calendar.getInstance().get(Calendar.YEAR); // GotChanged
        String database = "1stSem_Sy" + year + "_" + (year + 1);
        try {
            ResultSet rs = ESystem.st.executeQuery("SHOW DATABASES LIKE '" + database + "'");
            if (!rs.next()) {
                String query = "CREATE DATABASE " + database + ";";
                ESystem.st.execute(query);
                JOptionPane.showMessageDialog(this, "Database Created: " + database);
                query = "USE " + database + ";"; 
                ESystem.st.execute(query);

                // First create all tables without foreign keys
                query = "CREATE TABLE IF NOT EXISTS students (" +
                "ID INT PRIMARY KEY, " +
                "Name VARCHAR(100) NOT NULL, " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Gender VARCHAR(10), " +
                "YearLevel INT" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS subjects (" +
                "ID INT PRIMARY KEY, " +
                "Code VARCHAR(20) NOT NULL, " +
                "Description VARCHAR(100) NOT NULL, " +
                "Units INT, " +
                "Schedule VARCHAR(50)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS teachers (" +
                "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                "Name VARCHAR(100), " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Department VARCHAR(100), " +
                "UNIQUE (ID)" +
                // "Status VARCHAR(100)" +
                ")"; 
                ESystem.st.execute(query);

                // Create tables without foreign key constraints first
                query = "CREATE TABLE IF NOT EXISTS Enroll (" +
                "eid INT NOT NULL, " +
                "studid INT NOT NULL, " +
                "subjid INT NOT NULL, " +
                "PRIMARY KEY (eid), " +
                "UNIQUE (studid, subjid)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Assign (" +
                "tid INT NOT NULL, " +
                "subid INT NOT NULL, " +
                "PRIMARY KEY (tid, subid), " +
                "UNIQUE (subid), " +
                "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Grades (" +
                "GradeID INT AUTO_INCREMENT PRIMARY KEY, " +
                "eid INT NOT NULL, " +
                "Prelim TEXT, " +
                "Midterm TEXT, " +
                "Prefinal TEXT, " +
                "Final TEXT, " +
                "UNIQUE (eid), " +
                "FOREIGN KEY (eid) REFERENCES Enroll(eid) ON DELETE CASCADE" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS TransactionCharges (" +
                "TransID INT, " +
                "Department TEXT, " +
                "SubjUnits DECIMAL(10,2), " +
                "Insurance DECIMAL(10,2), " +
                "Computer DECIMAL(10,2), " +
                "Laboratory DECIMAL(10,2), " +
                "Cultural DECIMAL(10,2), " +
                "Library DECIMAL(10,2), " +
                "Facility DECIMAL(10,2)" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Invoice (" +
                "Invoicenum INT, " +
                "studid INT, " +
                "TransID INT" +
                ")";
                ESystem.st.execute(query);

                // Now add foreign key constraints
                query = "ALTER TABLE Enroll " +
                        "ADD CONSTRAINT fk_enroll_student " +
                        "FOREIGN KEY (studid) REFERENCES students(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_enroll_subject " +
                        "FOREIGN KEY (subjid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

                query = "ALTER TABLE Assign " +
                        "ADD CONSTRAINT fk_assign_teacher " +
                        "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_assign_subject " +
                        "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

            } else {
                JOptionPane.showMessageDialog(this, "Database already exists: " + database);
                ESystem.st.execute("USE " + database + ";");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            System.out.println("Error creating database: " + e.getMessage());
        }  
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        // Add 2ndSem to database
        int year = Calendar.getInstance().get(Calendar.YEAR);
        String database = "2ndSem_Sy" + year + "_" + (year + 1);
        try {
            ResultSet rs = ESystem.st.executeQuery("SHOW DATABASES LIKE '" + database + "'");
            if (!rs.next()) {
                String query = "CREATE DATABASE " + database + ";";
                ESystem.st.execute(query);
                JOptionPane.showMessageDialog(this, "Database Created: " + database);
                query = "USE " + database + ";"; 
                ESystem.st.execute(query);

                // First create all tables without foreign keys
                query = "CREATE TABLE IF NOT EXISTS students (" +
                "ID INT PRIMARY KEY, " +
                "Name VARCHAR(100) NOT NULL, " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Gender VARCHAR(10), " +
                "YearLevel INT" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS subjects (" +
                "ID INT PRIMARY KEY, " +
                "Code VARCHAR(20) NOT NULL, " +
                "Description VARCHAR(100) NOT NULL, " +
                "Units INT, " +
                "Schedule VARCHAR(50)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS teachers (" +
                "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                "Name VARCHAR(100), " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Department VARCHAR(100), " +
                "UNIQUE (ID)" +
                // "Status VARCHAR(100)" +
                ")"; 
                ESystem.st.execute(query);

                // Create tables without foreign key constraints first
                query = "CREATE TABLE IF NOT EXISTS Enroll (" +
                "eid INT NOT NULL, " +
                "studid INT NOT NULL, " +
                "subjid INT NOT NULL, " +
                "PRIMARY KEY (eid), " +
                "UNIQUE (studid, subjid)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Assign (" +
                "tid INT NOT NULL, " +
                "subid INT NOT NULL, " +
                "PRIMARY KEY (tid, subid), " +
                "UNIQUE (subid), " +
                "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Grades (" +
                "GradeID INT AUTO_INCREMENT PRIMARY KEY, " +
                "eid INT NOT NULL, " +
                "Prelim TEXT, " +
                "Midterm TEXT, " +
                "Prefinal TEXT, " +
                "Final TEXT, " +
                "UNIQUE (eid), " +
                "FOREIGN KEY (eid) REFERENCES Enroll(eid) ON DELETE CASCADE" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS TransactionCharges (" +
                "TransID INT, " +
                "Department TEXT, " +
                "SubjUnits DECIMAL(10,2), " +
                "Insurance DECIMAL(10,2), " +
                "Computer DECIMAL(10,2), " +
                "Laboratory DECIMAL(10,2), " +
                "Cultural DECIMAL(10,2), " +
                "Library DECIMAL(10,2), " +
                "Facility DECIMAL(10,2)" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Invoice (" +
                "Invoicenum INT, " +
                "studid INT, " +
                "TransID INT" +
                ")";
                ESystem.st.execute(query);

                // Now add foreign key constraints
                query = "ALTER TABLE Enroll " +
                        "ADD CONSTRAINT fk_enroll_student " +
                        "FOREIGN KEY (studid) REFERENCES students(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_enroll_subject " +
                        "FOREIGN KEY (subjid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

                query = "ALTER TABLE Assign " +
                        "ADD CONSTRAINT fk_assign_teacher " +
                        "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_assign_subject " +
                        "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

            } else {
                JOptionPane.showMessageDialog(this, "Database already exists: " + database);
                ESystem.st.execute("USE " + database + ";");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            System.out.println("Error creating database: " + e.getMessage());
        }  
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        // Add Summer to database
        int year = Calendar.getInstance().get(Calendar.YEAR);
        String database = "Summer_Sy" + year + "_" + (year + 1);
        try {
            ResultSet rs = ESystem.st.executeQuery("SHOW DATABASES LIKE '" + database + "'");
            if (!rs.next()) {
                String query = "CREATE DATABASE " + database + ";";
                ESystem.st.execute(query);
                JOptionPane.showMessageDialog(this, "Database Created: " + database);
                query = "USE " + database + ";"; 
                ESystem.st.execute(query);

                // First create all tables without foreign keys
                query = "CREATE TABLE IF NOT EXISTS students (" +
                "ID INT PRIMARY KEY, " +
                "Name VARCHAR(100) NOT NULL, " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Gender VARCHAR(10), " +
                "YearLevel INT" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS subjects (" +
                "ID INT PRIMARY KEY, " +
                "Code VARCHAR(20) NOT NULL, " +
                "Description VARCHAR(100) NOT NULL, " +
                "Units INT, " +
                "Schedule VARCHAR(50)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS teachers (" +
                "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                "Name VARCHAR(100), " +
                "Address VARCHAR(100), " +
                "Contact INT, " +
                "Department VARCHAR(100), " +
                "UNIQUE (ID)" +
                // "Status VARCHAR(100)" +
                ")"; 
                ESystem.st.execute(query);

                // Create tables without foreign key constraints first
                query = "CREATE TABLE IF NOT EXISTS Enroll (" +
                "eid INT NOT NULL, " +
                "studid INT NOT NULL, " +
                "subjid INT NOT NULL, " +
                "PRIMARY KEY (eid), " +
                "UNIQUE (studid, subjid)" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Assign (" +
                "tid INT NOT NULL, " +
                "subid INT NOT NULL, " +
                "PRIMARY KEY (tid, subid), " +
                "UNIQUE (subid), " +
                "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE" +
                ")"; 
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Grades (" +
                "GradeID INT AUTO_INCREMENT PRIMARY KEY, " +
                "eid INT NOT NULL, " +
                "Prelim TEXT, " +
                "Midterm TEXT, " +
                "Prefinal TEXT, " +
                "Final TEXT, " +
                "UNIQUE (eid), " +
                "FOREIGN KEY (eid) REFERENCES Enroll(eid) ON DELETE CASCADE" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS TransactionCharges (" +
                "TransID INT, " +
                "Department TEXT, " +
                "SubjUnits DECIMAL(10,2), " +
                "Insurance DECIMAL(10,2), " +
                "Computer DECIMAL(10,2), " +
                "Laboratory DECIMAL(10,2), " +
                "Cultural DECIMAL(10,2), " +
                "Library DECIMAL(10,2), " +
                "Facility DECIMAL(10,2)" +
                ")";
                ESystem.st.execute(query);

                query = "CREATE TABLE IF NOT EXISTS Invoice (" +
                "Invoicenum INT, " +
                "studid INT, " +
                "TransID INT" +
                ")";
                ESystem.st.execute(query);

                // Now add foreign key constraints
                query = "ALTER TABLE Enroll " +
                        "ADD CONSTRAINT fk_enroll_student " +
                        "FOREIGN KEY (studid) REFERENCES students(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_enroll_subject " +
                        "FOREIGN KEY (subjid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

                query = "ALTER TABLE Assign " +
                        "ADD CONSTRAINT fk_assign_teacher " +
                        "FOREIGN KEY (tid) REFERENCES teachers(ID) ON DELETE CASCADE, " +
                        "ADD CONSTRAINT fk_assign_subject " +
                        "FOREIGN KEY (subid) REFERENCES subjects(ID) ON DELETE CASCADE";
                ESystem.st.execute(query);

            } else {
                JOptionPane.showMessageDialog(this, "Database already exists: " + database);
                ESystem.st.execute("USE " + database + ";");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            System.out.println("Error creating database: " + e.getMessage());
        }  
    }//GEN-LAST:event_jMenuItem7ActionPerformed
    
    public void showRecords() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        try {
            // Use the correct case for the table name (lowercase 's' in 'students')
            String query = "SELECT * FROM students";
            ESystem.rs = ESystem.st.executeQuery(query);
            
            while (ESystem.rs.next()) {
                model.addRow(new Object[]{
                    ESystem.rs.getString("ID"),
                    ESystem.rs.getString("Name"),
                    ESystem.rs.getString("Address"),
                    ESystem.rs.getString("Contact"),
                    ESystem.rs.getString("Gender"),
                    ESystem.rs.getString("YearLevel")
                });
            }
            
            // Clear the form fields if no rows were returned
            if (model.getRowCount() == 0) {
                clearForm();
            }
        } catch (SQLException e) {
            System.out.println("Error loading students: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Error loading students: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearForm() {
        Studid.setText("");
        Name.setText("");
        Address.setText("");
        Contact.setText("");
        Gender.setText("");
        YearLevel.setText("");
        
        // Clear the enrolled subjects table
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
    }
    
    public void showEnrollRecords() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        
        if (Studid.getText().trim().isEmpty()) {
            return;
        }
        
        try {
            int studentId = Integer.parseInt(Studid.getText());
            
            String query = "SELECT * FROM subjects JOIN Enroll e ON subjects.ID = e.subjid WHERE e.studid = " + studentId;
            
            ESystem.rs = ESystem.st.executeQuery(query);
            
            while (ESystem.rs.next()) {
                String subjectId = ESystem.rs.getString("ID");
                String code = ESystem.rs.getString("Code");
                String description = ESystem.rs.getString("Description");
                String units = ESystem.rs.getString("Units");
                String schedule = ESystem.rs.getString("Schedule");
                
                model.addRow(new String[]{subjectId, code, description, units, schedule});
            }
            
        } catch (Exception ex) { 
            System.out.println("Error loading enrolled subjects: " + ex.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Address;
    private javax.swing.JTextField Contact;
    private javax.swing.JTextField Gender;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField Studid;
    private javax.swing.JTextField YearLevel;
    private javax.swing.JButton delete;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}