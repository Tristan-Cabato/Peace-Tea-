/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;
import java.sql.*;
import javax.swing.*;
import java.util.*;

/**
 *
 * @author tcabato
 */
public class Login extends javax.swing.JFrame {
    boolean loggedIn = false;
    private String loggedInUsername;
    private String loggedInPassword;
    private static Login instance;

    /**
     * Creates new form Login
     */
    public Login() {
        instance = this;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        databaseDropDown = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        usernameField.setText("root");
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        passField.setText("⚫⚫⚫⚫");
        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("School Year");

        databaseDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "School Year"}));
        databaseDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseDropDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passField)
                            .addComponent(databaseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton)
                            .addComponent(loginButton))
                        .addGap(54, 54, 54)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(databaseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(submitButton)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
    }//GEN-LAST:event_passFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        String username = usernameField.getText().trim();
        String password = new String(passField.getPassword());
        
        if (username.isEmpty() || password.isEmpty()) {
            System.out.println("Please enter both username and password");
            JOptionPane.showMessageDialog(null, "Please enter both username and password", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String url = "jdbc:mysql://" + ESystem.hostAddress + ":" + ESystem.hostPort + "/";
            Connection testConn = null;
            try {
                testConn = DriverManager.getConnection(url, username, password);
                System.out.println("MySQL Login Successful!");
                loggedIn = true;
                this.loggedInUsername = username;
                this.loggedInPassword = password;

                try (Statement stmt = testConn.createStatement();
                    ResultSet rs = stmt.executeQuery("SHOW GRANTS")) {
                    
                    databaseDropDown.removeAllItems();
                    Set<String> accessibleDbs = new HashSet<>();
                    
                    // Parse the GRANT statements to find database access
                    while (rs.next()) {
                        String grant = rs.getString(1).toLowerCase();
                        // Check for global privileges
                        if (grant.contains("on *.*")) {
                            // User has access to all databases, so we'll show all non-system databases
                            try (ResultSet allDbs = stmt.executeQuery("SHOW DATABASES")) {
                                while (allDbs.next()) {
                                    String dbName = allDbs.getString(1);
                                    if (!dbName.equalsIgnoreCase("information_schema") && 
                                        !dbName.equalsIgnoreCase("mysql") &&
                                        !dbName.equalsIgnoreCase("performance_schema") &&
                                        !dbName.equalsIgnoreCase("sys")) {
                                        accessibleDbs.add(dbName);
                                    }
                                }
                            }
                            break;
                        } else if (grant.contains("on `") && grant.contains("`.*")) {
                            // Extract database name from grant statement
                            int start = grant.indexOf("`") + 1;
                            int end = grant.indexOf("`", start);
                            if (start > 0 && end > start) {
                                String dbName = grant.substring(start, end);
                                accessibleDbs.add(dbName);
                            }
                        }
                    }
                    
                    // Add accessible databases to the dropdown
                    for (String dbName : accessibleDbs) {
                        databaseDropDown.addItem(dbName);
                    }
                    
                    if (databaseDropDown.getItemCount() == 0) {
                        JOptionPane.showMessageDialog(null, "No accessible databases found for this user");
                    } else {
                        databaseDropDown.setEnabled(true);
                        submitButton.setEnabled(true);
                    }
                }
            } catch (SQLException ex) {
                String errorMsg = ex.getMessage();
                if (errorMsg.contains("Access denied")) {
                    errorMsg = "Access denied for user '" + username + "' (using password: " + (password.isEmpty() ? "NO" : "YES") + ")";
                }
                JOptionPane.showMessageDialog(null, "Access Denied");
                System.out.println("Failed to connect: " + errorMsg);
            } finally {
                if (testConn != null) {
                    try { testConn.close(); } catch (SQLException e) {}
                }
            }
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedDb = (String) databaseDropDown.getSelectedItem();
    
        if (!loggedIn) {
            JOptionPane.showMessageDialog(null, "Login First");
            return;
        }
    
        if (selectedDb == null || selectedDb.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a database");
            System.out.println("Please select a database");
            return;
        }
    
        try {
            if (ESystem.DBConnect(selectedDb, this.loggedInUsername, this.loggedInPassword)) {
                // Check user's privileges to determine role
                boolean isStudent = false;
                boolean isTeacher = false;
    
                // First check for teacher privileges
                try (Statement stmt = ESystem.con.createStatement();
                     ResultSet rs = stmt.executeQuery("SHOW GRANTS FOR CURRENT_USER()")) {
    
                    while (rs.next()) {
                        String grant = rs.getString(1).toLowerCase();
                        // Check for teacher privileges (INSERT, UPDATE, etc.)
                        if (grant.contains("on `" + selectedDb.toLowerCase() + "`.*") && 
                            (grant.contains("insert") || grant.contains("update")) || grant.contains("select")) {
                            isTeacher = true;
                            break;
                        } else if (grant.contains("on `" + selectedDb.toLowerCase() + "`.*") && 
                            grant.contains("select")) {
                            isStudent = true;
                            break;
                        }
                    }
                } catch (SQLException e) {
                    System.err.println("Error checking privileges: " + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Error checking privileges", 
                        "Database Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (isStudent) {
                    new StudentRegistration().setVisible(true);
                } else if (isTeacher) {
                    new GradeForm().setVisible(true);
                } else {
                    new StudentsForm().setVisible(true);
                } this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, 
                    "Failed to connect to database: " + selectedDb);
                System.out.println("Failed to connect to database: " + selectedDb);
            }
            TeacherForm teacherForm = new TeacherForm();
                teacherForm.setConnectedDatabase(selectedDb);
            SubjectForm subjectForm = new SubjectForm();
                subjectForm.setConnectedDatabase(selectedDb);
            StudentsForm studentsForm = new StudentsForm();
                studentsForm.setConnectedDatabase(selectedDb);
        } catch (Exception ex) {
            String errorMsg = ex.getMessage();
            if (errorMsg.contains("Access denied")) {
                errorMsg = "Access denied for database: " + selectedDb;
            }
            JOptionPane.showMessageDialog(null, "Database error: " + errorMsg);
            System.out.println("Database error: " + errorMsg);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void databaseDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_databaseDropDownActionPerformed

    public static Login getCurrentInstance() {
        return instance;
    }
    
    public void refreshDatabaseList() {
        databaseDropDown.removeAllItems();
        try (Statement stmt = ESystem.con.createStatement();
             ResultSet rs = stmt.executeQuery("SHOW GRANTS FOR CURRENT_USER()")) {
            
            Set<String> accessibleDbs = new HashSet<>();
            
            while (rs.next()) {
                String grant = rs.getString(1).toLowerCase();
                if (grant.contains("on *.*")) {
                    // User has global privileges, show all non-system databases
                    try (ResultSet allDbs = stmt.executeQuery("SHOW DATABASES")) {
                        while (allDbs.next()) {
                            String dbName = allDbs.getString(1);
                            if (!dbName.equalsIgnoreCase("information_schema") && 
                                !dbName.equalsIgnoreCase("mysql") && 
                                !dbName.equalsIgnoreCase("performance_schema") && 
                                !dbName.equalsIgnoreCase("sys")) {
                                databaseDropDown.addItem(dbName);
                            }
                        }
                    }
                    break;
                } else if (grant.contains("on `") && grant.contains("`.*")) {
                    // Extract database name from grant statement
                    int start = grant.indexOf("`") + 1;
                    int end = grant.indexOf("`", start);
                    if (start > 0 && end > start) {
                        String dbName = grant.substring(start, end);
                        if (!accessibleDbs.contains(dbName)) {
                            accessibleDbs.add(dbName);
                            databaseDropDown.addItem(dbName);
                        }
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error refreshing database list: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> databaseDropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passField;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
