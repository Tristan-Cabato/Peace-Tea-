/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.esystem;
import java.sql.*;
import javax.swing.*;
import java.util.*;

/**
 *
 * @author tcabato
 */
public class Login extends javax.swing.JFrame {
    boolean loggedIn = false;
    private String loggedInUsername;
    private String loggedInPassword;
    private static Login instance;

    /**
     * Creates new form Login
     */
    public Login() {
        instance = this;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        databaseDropDown = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        usernameField.setText("root");
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        passField.setText("⚫⚫⚫⚫");
        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("School Year");

        databaseDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "School Year"}));
        databaseDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseDropDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passField)
                            .addComponent(databaseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton)
                            .addComponent(loginButton))
                        .addGap(54, 54, 54)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(databaseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(submitButton)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
    }//GEN-LAST:event_passFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        String username = usernameField.getText().trim();
        String password = new String(passField.getPassword());
        
        if (username.isEmpty() || password.isEmpty()) {
            System.out.println("Please enter both username and password");
            JOptionPane.showMessageDialog(null, "Please enter both username and password", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String url = "jdbc:mysql://" + ESystem.hostAddress + ":" + ESystem.hostPort + "/";
            Connection testConn = null;
            try {
                testConn = DriverManager.getConnection(url, username, password);
                System.out.println("MySQL Login Successful!");
                loggedIn = true;
                this.loggedInUsername = username;
                this.loggedInPassword = password;

                try (Statement stmt = testConn.createStatement();
                     ResultSet rs = stmt.executeQuery("SHOW GRANTS")) {

                    databaseDropDown.removeAllItems();
                    Set<String> accessibleDbs = new HashSet<>();

                    // Parse the GRANT statements to find database access
                    while (rs.next()) {
                        String grant = rs.getString(1);
                        if (grant == null) continue;
                        String grantLower = grant.toLowerCase(Locale.ROOT).trim();

                        // Ignore default USAGE grant
                        if (grantLower.startsWith("grant usage") && grantLower.contains(" on *.*")) {
                            continue;
                        }

                        // True global privilege (not just USAGE): include all non-system DBs
                        if (grantLower.contains(" on *.*") && !grantLower.startsWith("grant usage")) {
                            try (ResultSet allDbs = stmt.executeQuery("SHOW DATABASES")) {
                                while (allDbs.next()) {
                                    String dbName = allDbs.getString(1);
                                    if (!dbName.equalsIgnoreCase("information_schema") &&
                                        !dbName.equalsIgnoreCase("mysql") &&
                                        !dbName.equalsIgnoreCase("performance_schema") &&
                                        !dbName.equalsIgnoreCase("sys")) {
                                        accessibleDbs.add(dbName);
                                    }
                                }
                            }
                            break; // no need to parse further
                        }

                        // Extract database name when present
                        int onIdx = grantLower.indexOf(" on ");
                        if (onIdx >= 0) {
                            String tail = grant.substring(onIdx + 4); // original case
                            int tick1 = tail.indexOf('`');
                            if (tick1 >= 0) {
                                int tick2 = tail.indexOf('`', tick1 + 1);
                                if (tick2 > tick1) {
                                    String dbName = tail.substring(tick1 + 1, tick2);
                                    if (dbName != null && !dbName.isEmpty()) accessibleDbs.add(dbName);
                                }
                            } else {
                                int starIdx = tail.indexOf(".*");
                                if (starIdx > 0) {
                                    String dbName = tail.substring(0, starIdx).trim();
                                    if ((dbName.startsWith("'") && dbName.endsWith("'")) ||
                                        (dbName.startsWith("\"") && dbName.endsWith("\""))) {
                                        dbName = dbName.substring(1, dbName.length() - 1);
                                    }
                                    if (!dbName.isEmpty() && !dbName.contains(" ")) accessibleDbs.add(dbName);
                                }
                            }
                        }
                    }

                    // Sort deterministically: 1stSem -> 2ndSem -> Summer; within same term, newest school year first
                    java.util.List<String> dbList = new java.util.ArrayList<>(accessibleDbs);
                    java.util.Collections.sort(dbList, (a, b) -> {
                        int[] wa = extractSortKey(a);
                        int[] wb = extractSortKey(b);
                        if (wa[0] != wb[0]) return Integer.compare(wb[0], wa[0]);
                        if (wa[1] != wb[1]) return Integer.compare(wa[1], wb[1]);
                        return a.compareToIgnoreCase(b);
                    });
                    for (String dbName : dbList) databaseDropDown.addItem(dbName);

                    if (databaseDropDown.getItemCount() == 0) {
                        JOptionPane.showMessageDialog(null, "No accessible databases found for this user");
                    } else {
                        databaseDropDown.setEnabled(true);
                        submitButton.setEnabled(true);
                    }
                }
            } catch (SQLException ex) {
                String errorMsg = ex.getMessage();
                if (errorMsg.contains("Access denied")) {
                    errorMsg = "Access denied for user '" + username + "' (using password: " + (password.isEmpty() ? "NO" : "YES") + ")";
                }
                JOptionPane.showMessageDialog(null, "Access Denied");
                System.out.println("Failed to connect: " + errorMsg);
            } finally {
                if (testConn != null) {
                    try { testConn.close(); } catch (SQLException e) {}
                }
            }
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedDb = (String) databaseDropDown.getSelectedItem();
    
        if (!loggedIn) {
            JOptionPane.showMessageDialog(null, "Login First");
            return;
        }
    
        if (selectedDb == null || selectedDb.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a database");
            System.out.println("Please select a database");
            return;
        }
    
        try {
            // First try to connect to the database
            if (ESystem.DBConnect(selectedDb, this.loggedInUsername, this.loggedInPassword)) {
                // Now verify we have actual access by checking the database-level privileges
                boolean hasAccess = false;
                boolean isTeacher = false;
                
                try (Statement stmt = ESystem.con.createStatement()) {
                    // For root user, grant full access and teacher privileges
                    if ("root".equalsIgnoreCase(this.loggedInUsername)) {
                        hasAccess = true;
                        isTeacher = true;
                    } else {
                        // For non-root users, check their specific privileges
                        String escDb = selectedDb.replace("'", "''");
                        String escUser = this.loggedInUsername.replace("'", "''");
                        String accessSql = "SELECT " +
                                "COUNT(CASE WHEN privilege_type = 'SELECT' THEN 1 END) > 0 as has_select, " +
                                "COUNT(CASE WHEN privilege_type = 'INSERT' THEN 1 END) > 0 as has_insert, " +
                                "COUNT(CASE WHEN privilege_type = 'UPDATE' THEN 1 END) > 0 as has_update " +
                                "FROM information_schema.schema_privileges " +
                                "WHERE table_schema = '" + escDb + "' " +
                                "AND REPLACE(grantee, '''', '') LIKE '" + escUser + "@%'";
                        try (ResultSet rs = stmt.executeQuery(accessSql)) {
                            
                            if (rs.next()) {
                                hasAccess = rs.getBoolean("has_select"); // Need at least SELECT access
                                isTeacher = rs.getBoolean("has_select") && 
                                          rs.getBoolean("has_insert") && 
                                          rs.getBoolean("has_update"); // Need all three for teacher
                            }
                        }
                    }
                } catch (SQLException e) {
                    System.err.println("Error checking database access: " + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Error checking database access: " + e.getMessage(), 
                        "Database Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (!hasAccess) {
                    JOptionPane.showMessageDialog(null, 
                        "You don't have access to this database: " + selectedDb,
                        "Access Denied", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Route based on role
                if ("root".equalsIgnoreCase(this.loggedInUsername)) {
                    // Admin/root: go to the main StudentsForm (has DB and CRUD menus)
                    StudentsForm adminHub = new StudentsForm();
                    adminHub.setVisible(true);
                    this.dispose();
                    return;
                }
                
                if (isTeacher) {
                    // Teacher users: go to GradeForm
                    GradeForm gradeForm = new GradeForm();
                    gradeForm.setVisible(true);
                } else {
                    // Student or other user with only SELECT access
                    StudentRegistration studentForm = new StudentRegistration();
                    studentForm.setVisible(true);
                }
                
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, 
                    "Failed to connect to database: " + selectedDb);
                System.out.println("Failed to connect to database: " + selectedDb);
            }
        } catch (Exception ex) {
            String errorMsg = ex.getMessage();
            if (errorMsg.contains("Access denied")) {
                errorMsg = "Access denied for database: " + selectedDb;
            }
            JOptionPane.showMessageDialog(null, "Database error: " + errorMsg);
            System.out.println("Database error: " + errorMsg);
        }
    }

    private void databaseDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_databaseDropDownActionPerformed

    public static Login getCurrentInstance() {
        return instance;
    }
    
    public void refreshDatabaseList() {
        loginButtonActionPerformed(null);
    }
    
    // Helper to extract sorting keys: [year, termOrder]
    // termOrder: 1stSem -> 0, 2ndSem -> 1, Summer -> 2, others -> 3
    private static int[] extractSortKey(String dbName) {
        int year = -1; // unknown year sorts last
        int termOrder = 3; // unknown term sorts after Summer
        try {
            String lower = dbName.toLowerCase();
            if (lower.startsWith("1stsem")) termOrder = 0;
            else if (lower.startsWith("2ndsem")) termOrder = 1;
            else if (lower.startsWith("summer")) termOrder = 2;

            // Try to parse year after "_sy"
            int syIdx = lower.indexOf("_sy");
            if (syIdx >= 0 && syIdx + 3 < dbName.length()) {
                int i = syIdx + 3;
                StringBuilder num = new StringBuilder();
                while (i < dbName.length() && Character.isDigit(dbName.charAt(i))) {
                    num.append(dbName.charAt(i));
                    i++;
                }
                if (num.length() >= 4) {
                    year = Integer.parseInt(num.substring(0, 4));
                }
            }
        } catch (Exception ignored) {}
        return new int[] { year, termOrder };
    }

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> databaseDropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passField;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
